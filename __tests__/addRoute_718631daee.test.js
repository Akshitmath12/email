// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
const hyperquest = require('hyperquest');
const bl = require('bl');
const qs = require('querystring');
const addRoute = require('../add-route');

describe('addRoute function', () => {
  let apiMock, blMock;

  beforeAll(() => {
    apiMock = jest.spyOn(hyperquest, 'post');
    blMock = jest.spyOn(bl, 'bl');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should call hyperquest.post with correct parameters', () => {
    addRoute('domain', { 'api-key': '123' }, 'description', 'expression', 'actions', jest.fn());

    expect(apiMock).toHaveBeenCalledTimes(1);
    expect(apiMock).toHaveBeenCalledWith('domain', {
      auth: 'api:123',
      headers: {
        'content-type': 'application/x-www-form-urlencoded',
        'content-length': 64
      }
    });
  });

  it('should call bl with callback', () => {
    const callback = jest.fn();
    addRoute('domain', { 'api-key': '123' }, 'description', 'expression', 'actions', callback);

    expect(blMock).toHaveBeenCalledTimes(1);
    expect(blMock).toHaveBeenCalledWith(callback);
  });

  it('should handle error when hyperquest.post throws error', () => {
    apiMock.mockImplementation(() => {
      throw new Error('Network error');
    });

    expect(() => addRoute('domain', { 'api-key': '123' }, 'description', 'expression', 'actions', jest.fn())).toThrow('Network error');
  });
});
